// Copyright Â© 2021 Attestant Limited.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package signer_test

import (
	context "context"
	"testing"

	"github.com/bliiitz/dirk/services/api/grpc/interceptors"
	"github.com/stretchr/testify/require"
	pb "github.com/wealdtech/eth2-signer-api/pb/v1"
)

func TestMultisign(t *testing.T) {
	tests := []struct {
		name   string
		client string
		req    *pb.MultisignRequest
		states []pb.ResponseState
		err    string
	}{
		{
			name:   "Empty",
			client: "client1",
			states: []pb.ResponseState{pb.ResponseState_DENIED},
		},
		{
			name:   "DataMissing",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 1",
						},
						Domain: []byte{
							0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_DENIED},
		},
		{
			name:   "IDMissing",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_DENIED},
		},
		{
			name:   "IDInvalid",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_Account{
							Account: "Bad",
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_DENIED},
		},
		{
			name:   "DomainMissing",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 1",
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_DENIED},
		},
		{
			name:   "DataMissing",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 1",
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_DENIED},
		},
		{
			name:   "Good",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 1",
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_SUCCEEDED},
		},
		{
			name:   "GoodMulti",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 1",
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 2",
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_SUCCEEDED, pb.ResponseState_SUCCEEDED},
		},
		{
			name:   "SameAccountTwice",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 1",
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 1",
						},
						Data: []byte{
							0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
							0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
							0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
							0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
						},
						Domain: []byte{
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_FAILED, pb.ResponseState_FAILED},
		},
	}

	handler, err := Setup()
	require.Nil(t, err)

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			ctx := context.WithValue(context.Background(), &interceptors.ClientName{}, test.client)
			resp, err := handler.Multisign(ctx, test.req)
			if test.err == "" {
				require.NoError(t, err)
				for i := range test.states {
					require.Equal(t, resp.Responses[i].State, test.states[i])
				}
			} else {
				require.EqualError(t, err, test.err)
			}
		})
	}
}
